'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''  DiseñoRepositorio.vb
''  Implementation of the Class DiseñoRepositorio
''  Generated by Enterprise Architect
''  Created on:      09-ago-2012 11:28:02 p.m.
''  Original author: Diego
''  
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Modification history:
''  
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Option Explicit On

Imports Dominio

Public Class DiseñoRepositorio

    Dim diseñoTDG As DiseñoTDG
    Dim clienteTDG As ClienteTDG
    Dim usuarioTDG As UsuarioTDG
    Dim disInsTDG As DiseñoInsumoTDG
    Dim historicoDiseño As HistoricoEstadosDiseñoTDG
    Dim estadoDiseño As EstadoDiseñoTDG

    Sub New(ByVal diseTDG As DiseñoTDG, ByVal clienteTDG As ClienteTDG,
            ByVal usrTDG As UsuarioTDG, ByVal insTDG As DiseñoInsumoTDG,
            ByVal historicoDiseño As HistoricoEstadosDiseñoTDG, ByVal estadoDiseño As EstadoDiseñoTDG)
        Me.diseñoTDG = diseTDG
        Me.clienteTDG = clienteTDG
        Me.usuarioTDG = usrTDG
        Me.disInsTDG = insTDG
        Me.historicoDiseño = historicoDiseño
        Me.estadoDiseño = estadoDiseño
    End Sub

    Public Sub ActualizarFichaDiseño(ByVal diseño As Diseño)
        diseñoTDG.actualizar(diseño)

        For Each insumo As DiseñoInsumo In diseño.insumos
            disInsTDG.borrar(insumo)
            disInsTDG.grabar(insumo)
        Next

        If diseño.historicoEstados IsNot Nothing Then
            For Each estado As HistoricoEstadosDiseño In diseño.historicoEstados
                If estado.nroEstado = 0 Then
                    Me.historicoDiseño.grabar(estado)
                Else
                    Me.historicoDiseño.actualizar(estado)
                End If
            Next
        End If
    End Sub

    Public Function BuscarDiseños(ByVal Nombre As String,
                                  ByVal puntadasDesde As String, ByVal puntadasHasta As String,
                                  ByVal anchoDesde As String, ByVal anchoHasta As String,
                                  ByVal altoDesde As String, ByVal altoHasta As String,
                                  ByVal cliente As String, ByVal estado As String) As List(Of Diseño)
        Dim criteria As New List(Of Restriccion)
        If Not String.IsNullOrEmpty(estado) Then
            criteria.Add(New Restriccion(diseñoTDG.ESTADO_ACTUAL, estado))
        End If
        If Not String.IsNullOrEmpty(Nombre) Then
            criteria.Add(New Restriccion(diseñoTDG.NOMBRE, Nombre, Restriccion.CONDICION_LIKE))
        End If
        If Not String.IsNullOrEmpty(puntadasDesde) Then
            criteria.Add(New Restriccion(diseñoTDG.PUNTADA, puntadasDesde, Restriccion.CONDICION_MAYOR_IGUAL))
        End If
        If Not String.IsNullOrEmpty(puntadasHasta) Then
            criteria.Add(New Restriccion(diseñoTDG.PUNTADA, puntadasHasta, Restriccion.CONDICION_MENOR_IGUAL))
        End If
        If Not String.IsNullOrEmpty(anchoDesde) Then
            criteria.Add(New Restriccion(diseñoTDG.ANCHO, anchoDesde, Restriccion.CONDICION_MAYOR_IGUAL))
        End If
        If Not String.IsNullOrEmpty(anchoHasta) Then
            criteria.Add(New Restriccion(diseñoTDG.ANCHO, anchoHasta, Restriccion.CONDICION_MENOR_IGUAL))
        End If
        If Not String.IsNullOrEmpty(altoDesde) Then
            criteria.Add(New Restriccion(diseñoTDG.ALTO, altoDesde, Restriccion.CONDICION_MAYOR_IGUAL))
        End If
        If Not String.IsNullOrEmpty(altoHasta) Then
            criteria.Add(New Restriccion(diseñoTDG.ALTO, altoHasta, Restriccion.CONDICION_MENOR_IGUAL))
        End If
        If Not String.IsNullOrEmpty(cliente) Then
            criteria.Add(New Restriccion(diseñoTDG.CLIENTE, cliente))
        End If

        Dim diseños As List(Of Diseño) = diseñoTDG.cargarDiseños(criteria)

        For Each Diseño As Diseño In diseños
            completarDiseño(Diseño)
        Next

        Return diseños
    End Function

    ''' 
    ''' <param name="diseño"></param>
    Public Sub BuscarImagen(ByVal diseño As Diseño)

    End Sub

    Public Function listarDiseños() As List(Of Diseño)
        Dim diseños As List(Of Diseño) = diseñoTDG.cargarDiseños(Nothing)

        For Each Diseño As Diseño In diseños
            completarDiseño(Diseño)
        Next

        Return diseños
    End Function

    ''' 
    ''' <param name="diseño"></param>
    Public Sub grabarDiseño(ByRef diseño As Diseño)
        diseñoTDG.grabar(diseño)

        For Each insumo As DiseñoInsumo In diseño.insumos
            disInsTDG.grabar(insumo)
        Next

        If Not diseño.historicoEstados Is Nothing Then
            For Each estado As HistoricoEstadosDiseño In diseño.historicoEstados
                estado.diseño = diseño
                Me.historicoDiseño.grabar(estado)
            Next
        End If
    End Sub

    Sub borrar(ByVal diseño As Diseño)
        For Each insumo As DiseñoInsumo In diseño.insumos
            disInsTDG.borrar(insumo)
        Next

        diseñoTDG.borrar(diseño)
    End Sub

    Function buscarDiseñoPorId(ByVal id As Long) As Diseño
        Dim criteria As New List(Of Restriccion)
        criteria.Add(New Restriccion(diseñoTDG.ID_DISEÑO, id))

        Dim diseño As Diseño = diseñoTDG.buscarUnico(criteria)

        If diseño IsNot Nothing Then
            completarDiseño(diseño)
        End If

        Return diseño
    End Function

    Function buscarDiseñoPorCliente(ByVal cliente As Cliente) As List(Of Diseño)
        Dim criteria As New List(Of Restriccion)
        criteria.Add(New Restriccion(diseñoTDG.CLIENTE, cliente.idCliente))

        Dim diseños As List(Of Diseño) = diseñoTDG.cargarDiseños(criteria)

        For Each diseño As Diseño In diseños
            completarDiseño(diseño)
        Next

        Return diseños
    End Function

    Private Sub completarDiseño(ByVal Diseño As Diseño)
        Dim criteria As New List(Of Restriccion)

        Diseño.cliente = clienteTDG.buscarUnico(New Restriccion(clienteTDG.ID_CLIENTE, Diseño.cliente.idCliente))
        Diseño.cliente.agregarUsuario(usuarioTDG.buscarUnico(New Restriccion(usuarioTDG.ID_USUARIO, Diseño.cliente.id)))
        Diseño.insumos = disInsTDG.buscarDiseñoInsumoConRestriccion(New Restriccion(DiseñoInsumoTDG.DISEÑO, Diseño.idDiseño))

        criteria.Clear()
        criteria.Add(New Restriccion(HistoricoEstadosDiseñoTDG.COD_DISEÑO, Diseño.idDiseño))
        Diseño.historicoEstados = Me.historicoDiseño.cargarEstados(criteria)

        criteria.Clear()
        Diseño.estadoActual = Me.estadoDiseño.buscarEstadosPorId(Diseño.estadoActual.estado)
    End Sub


End Class ' DiseñoRepositorio