'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''  PedidoBusiness.vb
''  Implementation of the Class PedidoBusiness
''  Generated by Enterprise Architect
''  Created on:      20-ago-2012 04:41:57 p.m.
''  Original author: Diego
''  
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Modification history:
''  
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Option Explicit On
Option Strict On

Imports Dominio

Public Class PedidoBusiness

    Dim produccionRepo As ProduccionRepositorio
    Dim repo As PedidoRepositorio
    Dim newsletterRepo As NewsletterRepositorio
    Dim usuarioRepo As UsuarioRepositorio
    Dim articuloRepo As ArticuloRepositorio

    Sub New()
        Me.repo = RepositorioFactory.pedidoRepositorio
        Me.produccionRepo = RepositorioFactory.produccionRepositorio
        Me.newsletterRepo = RepositorioFactory.newsletterRepositorio
        Me.usuarioRepo = RepositorioFactory.usuarioRepostorio
        Me.articuloRepo = RepositorioFactory.articuloRepositorio
    End Sub

    Sub New(ByVal repo As PedidoRepositorio, ByVal produccionRepo As ProduccionRepositorio,
            ByVal newsletterRepo As NewsletterRepositorio, ByVal usuarioRepo As UsuarioRepositorio,
            ByVal articuloRepo As ArticuloRepositorio)
        Me.repo = repo
        Me.produccionRepo = produccionRepo
        Me.newsletterRepo = newsletterRepo
        Me.usuarioRepo = usuarioRepo
        Me.articuloRepo = articuloRepo
    End Sub

    Public Sub CambiarEstadpPedido(ByVal estadoNuevo As EstadoPedido, ByVal pedido As Pedido)
        pedido.estadoActual = estadoNuevo
        Dim fechaCambio As DateTime = DateTime.Now

        For Each estado As HistoricoEstados In pedido.historicoEstados
            If estado.fechaHasta.Year = 1 Then
                estado.fechaHasta = fechaCambio
            End If
        Next

        Dim nuevoEstado As New HistoricoEstados(Nothing, pedido, Nothing, fechaCambio, Nothing, estadoNuevo)
        pedido.historicoEstados.Add(nuevoEstado)

        repo.actualizarPedido(pedido)
    End Sub

    Public Sub actualizarPedido(ByVal pedido As Pedido)
        Me.repo.actualizarPedido(pedido)
    End Sub

    Public Function listarPedidos() As List(Of Pedido)
        Return Me.repo.listarPedidos
    End Function

    Public Function listarPedidosPorCliente(ByVal id As Long) As List(Of Pedido)

        Return Me.repo.listarPedidosPorCliente(id)
    End Function

    Public Function buscarPedidoPorCodigo(ByVal id As Long) As Pedido
        Return Me.repo.buscarPedidoPorCodigo(id)
    End Function

    Public Function listarPedidosConRestriccion(ByVal cliente As String, ByVal estadoActual As String,
                                               ByVal fechaDesdeInicio As DateTime, ByVal fechaHastaInicio As DateTime,
                                               ByVal fechaDesdeFinal As DateTime, ByVal fechaHastaFinal As DateTime) As List(Of Pedido)
        Return Me.repo.listarPedidosConRestriccion(cliente, estadoActual, fechaDesdeInicio, fechaHastaInicio, fechaDesdeFinal, fechaHastaFinal)
    End Function

    Public Sub GuardarPedido(ByVal com As String, ByVal hisEstados As List(Of HistoricoEstados),
            ByVal tipo As TipoPedido, ByVal trabajos As List(Of Produccion), ByVal cliente As Cliente,
             ByVal estadoActual As EstadoPedido, ByVal fechaInicio As Date, ByVal fechaFinal As Date)
        Dim pedido As New Pedido(Nothing, com, hisEstados, tipo, trabajos, cliente, estadoActual, fechaInicio, fechaFinal)
        Me.GuardarPedido(pedido)
    End Sub

    Public Sub GuardarPedido(ByVal pedido As Pedido)
        pedido.fechaInicio = calcularFechaInicio(pedido)
        pedido.fechaFinal = calcularFechaFinal(pedido)

        Me.repo.grabarPedido(pedido)

        CambiarEstadpPedido(pedido.estadoActual, pedido)

        mandarMailConfirmacion(pedido)
    End Sub

    Private Function calcularFechaFinal(ByVal pedido As Pedido) As DateTime
        Dim fecha As Date

        For Each prod As Produccion In pedido.trabajos
            If fecha.Year = 1 OrElse fecha.Ticks < prod.fechaFinal.Ticks Then
                fecha = prod.fechaFinal
            End If
        Next

        Return fecha
    End Function

    Private Function calcularFechaInicio(ByVal pedido As Pedido) As DateTime
        Dim fecha As Date

        For Each prod As Produccion In pedido.trabajos
            If fecha.Year = 1 OrElse fecha.Ticks > prod.fechaInicio.Ticks Then
                fecha = prod.fechaInicio
            End If
        Next

        Return fecha
    End Function

    Private Sub mandarMailConfirmacion(ByVal pedido As Pedido)
        Dim mailUtils As New MailUtils
        pedido = Me.repo.buscarPedidoPorCodigo(pedido.codPedido)

        Dim cliente As Usuario = Me.usuarioRepo.cargarUsuarioPorId(pedido.cliente.id)

        Dim trabajos As String = ""

        Dim cuerpo As String = Me.newsletterRepo.buscarNewsletterPorId(1).newsletter
        cuerpo = cuerpo.Replace("{cliente.apellido}", cliente.apellido)
        cuerpo = cuerpo.Replace("{cliente.Nombre}", cliente.nombre)
        cuerpo = cuerpo.Replace("{fechaComienzo}", pedido.fechaInicio.ToString("d"))
        cuerpo = cuerpo.Replace("{horaComienzo}", pedido.fechaInicio.ToString("t"))
        cuerpo = cuerpo.Replace("{fechaFinal}", pedido.fechaFinal.ToString("d"))
        cuerpo = cuerpo.Replace("{horaFinal}", pedido.fechaFinal.ToString("t"))

        Dim costoTotal As Double = 0
        Dim count As Integer = 1

        For Each temp As Produccion In pedido.trabajos
            Dim trabajo As Produccion = Me.produccionRepo.listarProduccionPorCodigo(temp.codProduccion)
            Dim trabajoHtml As String = Me.newsletterRepo.buscarNewsletterPorId(2).newsletter

            Dim articulo As Articulo = Me.articuloRepo.buscarArticulosPorCodigo(trabajo.articulo.codArticulo)

            trabajoHtml = trabajoHtml.Replace("{XX}", count.ToString)
            trabajoHtml = trabajoHtml.Replace("{Diseño.nombre}", articulo.diseño.nombre)
            trabajoHtml = trabajoHtml.Replace("{Diseño.alto}", articulo.diseño.alto.ToString)
            trabajoHtml = trabajoHtml.Replace("{Diseño.ancho}", articulo.diseño.ancho.ToString)
            trabajoHtml = trabajoHtml.Replace("{TipoPrenda.Nombre}", articulo.tipoPrenda.descripcion)
            trabajoHtml = trabajoHtml.Replace("{Trabajo.cantidad}", trabajo.cantidad.ToString)
            trabajoHtml = trabajoHtml.Replace("{Trabajo.precio}", articulo.precioActual.ToString)

            trabajoHtml = trabajoHtml.Replace("{fechaComienzo}", trabajo.fechaInicio.ToString("d"))
            trabajoHtml = trabajoHtml.Replace("{horaComienzo}", trabajo.fechaInicio.ToString("t"))
            trabajoHtml = trabajoHtml.Replace("{fechaFinal}", trabajo.fechaFinal.ToString("d"))
            trabajoHtml = trabajoHtml.Replace("{horaFinal}", trabajo.fechaFinal.ToString("t"))

            costoTotal += trabajo.cantidad * trabajo.articulo.precioActual
            count += 1

            trabajos += trabajoHtml
        Next

        cuerpo = cuerpo.Replace("{Trabajo.precio}", costoTotal.ToString("c"))
        cuerpo = cuerpo.Replace("{listaProduccion}", trabajos)

        mailUtils.enviarMail("uniprof@email.com", cliente.mail, "Detalle Pedido Uniprof", cuerpo)
    End Sub


End Class ' PedidoBusiness