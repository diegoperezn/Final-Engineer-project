'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''
''  UsuarioBusiness.vb
''  Implementation of the Class UsuarioBusiness
''  Generated by Enterprise Architect
''  Created on:      20-ago-2012 04:41:59 p.m.
''  Original author: Diego
''  
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''  Modification history:
''  
''
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Option Explicit On

Imports Dominio
Imports Repositorio

Public Class UsuarioBusiness

    Private usuarioRepo As UsuarioRepositorio
    Private clienteRepo As ClienteRepositorio

    Sub New()
        Me.usuarioRepo = RepositorioFactory.usuarioRepostorio
        Me.clienteRepo = RepositorioFactory.clienteRepositorio
    End Sub

    Sub New(ByVal repo As UsuarioRepositorio, ByVal clienteRepo As ClienteRepositorio)
        Me.usuarioRepo = repo
        Me.clienteRepo = clienteRepo
    End Sub

    ''' 
    ''' <param name="usuario"></param>
    Public Sub bloquearUsuario(ByVal usuario As Usuario)
        usuario.bloqueado = True
        usuarioRepo.actualizarUsuario(usuario)
    End Sub


    Public Sub crearUsuario(ByVal contraseña As String, ByVal famialias As List(Of Familia), ByVal permisos As List(Of Patente),
                            ByVal mail As String, ByVal telefonoMovil As String, ByVal telefonoFijo As String,
                            ByVal apellido As String, ByVal nombre As String)
        Dim usr As New Usuario(Nothing, apellido, mail, nombre, contraseña, telefonoFijo, telefonoMovil, famialias, permisos)
        usr.password = encriptarPassword(usr.password)
        crearUsuario(usr)
    End Sub

    Public Sub crearUsuario(ByVal usr As Usuario)
        usr.password = encriptarPassword(usr.password)
        usuarioRepo.grabarUsuario(usr)
    End Sub

    ''' 
    ''' <param name="mail"></param>
    Public Sub generarYEnviarPassword(ByVal mail As String)

    End Sub

    Public Function listarUsuarios() As List(Of Usuario)
        Return usuarioRepo.listarUsuarios(Nothing)
    End Function

    Public Function buscarUsuarioPorId(ByVal id As Long) As Usuario
        Dim usuario As Usuario = usuarioRepo.cargarUsuarioPorId(id)
        usuario.password = desencriptarPassword(usuario.password)

        Return usuario
    End Function

    Public Function listarUsuariosConRestricciones(ByVal nombre As String, ByVal apellido As String, ByVal mail As String,
                                               ByVal telMovil As String, ByVal telfijo As String) As List(Of Usuario)
        Return usuarioRepo.listarUsuariosConRestricciones(nombre, apellido, mail, telMovil, telfijo)
    End Function

    
    Public Sub modificarUsuario(ByVal id As Long, ByVal contraseña As String, ByVal familias As List(Of Familia), ByVal permisos As List(Of Patente),
                                ByVal mail As String, ByVal telefonoMovil As String, ByVal telefonoFijo As String, ByVal apellido As String, ByVal nombre As String)
        Dim usr As New Usuario(id, apellido, mail, nombre, contraseña, telefonoFijo, telefonoMovil, familias, permisos)
        usr.password = encriptarPassword(usr.password)
        modificarUsuario(usr)
    End Sub

    Public Sub actualizarCliente(ByVal cliente As Cliente)
        cliente.password = encriptarPassword(cliente.password)
        clienteRepo.actualizarCliente(cliente)
    End Sub

    Public Sub grabarCliente(ByVal cliente As Cliente)
        cliente.password = encriptarPassword(cliente.password)
        clienteRepo.guardarCliente(cliente)
    End Sub

    Public Sub borrarCliente(ByVal cliente As Cliente)
        clienteRepo.borrarCliente(cliente)
    End Sub

    ''' 
    ''' <param name="usuario"></param>
    Public Sub modificarUsuario(ByVal usuario As Usuario)
        usuario.password = encriptarPassword(usuario.password)
        usuarioRepo.actualizarUsuario(usuario)
    End Sub

    Function listarUsuarios(ByVal criteria As List(Of Restriccion)) As List(Of Usuario)
        Return usuarioRepo.listarUsuarios(criteria)
    End Function

    Function buscarUsuario(ByVal criteria As List(Of Restriccion)) As Usuario
        Return usuarioRepo.cargarUsuario(criteria)
    End Function

    Sub borrarUsuario(ByVal usr As Usuario)
        usuarioRepo.borrarUsuario(usr)
    End Sub

    Public Function login(ByVal mail As String, ByVal password As String) As Usuario
        Dim criteria As New List(Of Restriccion)
        criteria.Add(New Restriccion(UsuarioTDG.MAIL, mail, Restriccion.CONDICION_IGUAL))
        criteria.Add(New Restriccion(UsuarioTDG.PASSWORD, encriptarPassword(password), Restriccion.CONDICION_IGUAL))

        Dim usr As Usuario = usuarioRepo.cargarUsuario(criteria)
        If usr IsNot Nothing Then
            usr.password = desencriptarPassword(usr.password)
        End If

        Return usr
    End Function

    Public Shared Function encriptarPassword(ByVal password As String) As String
        Dim Clave As String, i As Integer, Pass2 As String
        Dim CAR As String, Codigo As String
        Clave = "%ü&/@#$A"
        Pass2 = ""
        For i = 1 To Len(password)
            CAR = Mid(password, i, 1)
            Codigo = Mid(Clave, ((i - 1) Mod Len(Clave)) + 1, 1)
            Pass2 = Pass2 & Right("0" & Hex(Asc(Codigo) Xor Asc(CAR)), 2)
        Next i
        Return Pass2
    End Function

    Public Shared Function desencriptarPassword(ByVal CadenaADesencriptar As String) As String
        Dim Clave As String, i As Integer, Pass2 As String
        Dim CAR As String, Codigo As String
        Dim j As Integer

        Clave = "%ü&/@#$A"
        Pass2 = ""
        j = 1
        For i = 1 To Len(CadenaADesencriptar) Step 2
            CAR = Mid(CadenaADesencriptar, i, 2)
            Codigo = Mid(Clave, ((j - 1) Mod Len(Clave)) + 1, 1)
            Pass2 = Pass2 & Chr(Asc(Codigo) Xor Val("&h" + CAR))
            j = j + 1
        Next i
        Return Pass2
    End Function

    Function buscarUsuarioNewsletter() As List(Of Cliente)
        Return clienteRepo.CargarClientesNewsletter
    End Function

    Function CargarClientePorId(ByVal id As Long) As Cliente
        Return clienteRepo.CargarClientePorId(id)
    End Function

    Function CargarClientes() As List(Of Cliente)
        Return clienteRepo.CargarClientes
    End Function

End Class ' UsuarioBusiness